server.port=${PORT:9000}
# server.servlet.context-path=/apis

## Which db to run
#local.run.db=H2
 local.run.db=POSTGRESQL

# Environment Variables Needed for PostgreSQL database
# MYDBHOST
# MYDBNAME
# MYDBUSER
# MYDBPASSWORD

# Environment Variables Needed for OAuth2 Authentication Server
# OAUTHCLIENTID
# OAUTHCLIENTSECRET
# Find heroku info
# heroku config -a jrmmba-oauthmin
# postgres://nywlwzryuiuibs:bb05ab541f04294eabba5527358e2740c4202bfb0916eea53c95952d32c8914b@ec2-50-16-225-96.compute-1.amazonaws.com:5432/daoehut3060vdb
# postgres://nywlwzryuiuibs:bb05ab541f04294eabba5527358e2740c4202bfb0916eea53c95952d32c8914b@ec2-50-16-225-96.compute-1.amazonaws.com:5432/daoehut3060vdb
# posgress://username      :password                                                        @url                                      :5432/dbname

# Begin h2 configuration
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.web-allow-others=true
# End h2 configuration

# What do with the schema
# drop n create table again, good for testing
#spring.jpa.hibernate.ddl-auto=create
#spring.datasource.initialization-mode=always

# Good for production!
spring.jpa.hibernate.ddl-auto=update
# below turns off seed data
spring.datasource.initialization-mode=never

# Should we use createBlob from java.sql.connection. PostgreSQL requires it to be true.
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Feature that determines what happens when no accessors are found for a type
# (and there are no annotations to indicate it is meant to be serialized).
spring.jackson.serialization.fail-on-empty-beans=false

# Turns off Spring Boot automatic exception handling
server.error.whitelabel.enabled=false

# needed for actuators to work
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoint.shutdown.enabled=true

# spring.jpa.show-sql=true
# spring.jpa.properties.hibernate.format_sql=true